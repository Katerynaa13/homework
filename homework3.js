'number' + 3 + 3 // результат: number33, тому що виконується конкатенація

null + 3 // результат: 3, тому що null це 0, а 0+3=3

5 && "qwerty" // результат: qwerty, тому що перший операнд 5 є істинним, тому і вертає другий qwerty

+'40' + +'2' + "hillel"; // результат: 42hillel, тому що перед 40 та 2 є +, це означаэ що результат буде намбер, тобто 40+2=42 та далі виконується конкатенація 42hillel

'10' - 5 === 6; // результат: false, тому що 10-5=5 та 5 не дорівнює 6 

true + false // результат: 1, тому що true це 1, а false це нуль, 0+1=1

'4px' - 3 // результат: NaN, тому що різні типи данних, ми питаємось від стрінги відняти число 

'4' - 3 // результат: 1, тому що 4 привели у число і виконали відніманя 4 - 3 = 1 

'6' + 3 ** 0; // результат: 61, тому що 3 в степені нуль будет 1, далі виконується конкатенація 6 та 1

12 / '6' // результат: 2, тому що 6 привели до числа та виконалі ділення 12/6=2

'10' + (5 === 6); // результат: 10false, тому що спочатку виконуємо дію у скобках 5 не дорівнює 6 , тобто false та виконується конкатенація 10false

null == '' // результат: false, тому що null не дорівнює ''

3 ** (9 / 3); // результат: 27, тому що спочатку 9/3=3 та 3 в ступені 3 дорівнює 27 

!!'false' == !!'true' // результат: true, тому що !!'false' перше заперечення перетворює його на false, а друге заперечення робить його true. !!'true' перше заперечення перетворює його на false, а друге заперечення робить його true. true == true обидві сторони порівняння true, тому вираз оцінюється як true. 

0 || '0' && 1 // результат: 1. Оператор && має вищий пріоритет, ніж ||, тому він оцінюється першим. Вираз '0' && 1 є правдивим, оскільки обидва операнди є правдивими(true) значеннями. Оператор && повертає другий операнд (1), якщо перший операнд ('0') правдивий. Далі вираз 0 || 1. Оператор || повертає перший істинний операнд. У цьому випадку 1 є істинним, тому результат усього виразу дорівнює 1.

(+null == false) < 1; // результат: false, тому що +null це нуль та false це нуль, (+null == false) це буде true тобто 1 і порівнюємо чи 1<1, відповідь ні

false && true || true // результат: true, тому що false && true вертає false, тому що щоб отримати true повино бути true && true. Далі false || true вертає true, коли хоча б один оператор є true. 

false && (false || true); // результат: false, тому що false || true це значеня дорывнює true, тому що маємо хоч один оператор true. false && true вертає false, тому що щоб отримати true повино бути true && true

(+null == false) < 1 ** 5; // результат: false, тому що +null це нуль та false це нуль, (+null == false) це буде true тобто 1. Переводимо 1 у степынь 5 це буде 1 і порівнюємо чи 1<1, відповідь ні
